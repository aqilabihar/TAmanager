<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="PictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        /9j/4AAQSkZJRgABAQEAAAAAAAD/4gHYSUNDX1BST0ZJTEUAAQEAAAHIAAAAAAQwAABtbnRyUkdCIFhZ
        WiAH4AABAAEAAAAAAABhY3NwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAA9tYAAQAAAADTLQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlkZXNjAAAA8AAA
        ACRyWFlaAAABFAAAABRnWFlaAAABKAAAABRiWFlaAAABPAAAABR3dHB0AAABUAAAABRyVFJDAAABZAAA
        AChnVFJDAAABZAAAAChiVFJDAAABZAAAAChjcHJ0AAABjAAAADxtbHVjAAAAAAAAAAEAAAAMZW5VUwAA
        AAgAAAAcAHMAUgBHAEJYWVogAAAAAAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAA
        AAAAACSgAAAPhAAAts9YWVogAAAAAAAA9tYAAQAAAADTLXBhcmEAAAAAAAQAAAACZmYAAPKnAAANWQAA
        E9AAAApbAAAAAAAAAABtbHVjAAAAAAAAAAEAAAAMZW5VUwAAACAAAAAcAEcAbwBvAGcAbABlACAASQBu
        AGMALgAgADIAMAAxADb/2wBDAAUDBAQEAwUEBAQFBQUGBwwIBwcHBw8LCwkMEQ8SEhEPERETFhwXExQa
        FRERGCEYGh0dHx8fExciJCIeJBweHx7/2wBDAQUFBQcGBw4ICA4eFBEUHh4eHh4eHh4eHh4eHh4eHh4e
        Hh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh7/wAARCADJAMkDASIAAhEBAxEB/8QAHQABAAIC
        AwEBAAAAAAAAAAAAAAYHCAkBAwUCBP/EAEYQAAEDAgMFBAUJBAkFAQAAAAEAAgMEBQYHEQgSITFBE1Fh
        cSIygZGxFBYzNkJydIKyFVKhwiQ3Q1NzdZKiwSM1YoOj4f/EABoBAQACAwEAAAAAAAAAAAAAAAADBQIE
        BgH/xAAuEQACAgIABAQFAwUAAAAAAAAAAQIDBBEFEiExMzRBgRMiUXGxBjJhFBWRwfD/2gAMAwEAAhED
        EQA/AMu0REAREQBERAERdFfV09DRTVlXJ2cELC+R+6ToB4AEn2BAd6LHnMPazwLhmrkobZZb5eapn78B
        oovfKN/T8iq6t218QvlJosCWiGPo2aslkd7wG/BAWhtBZ1Zj5SXmM1WDbFcbFWyObQXBlTMC7Tj2cjfs
        yAce4jiDzArWn22bs0j5Rl9bpB17O5SN+LCoRnftJS5pZbjC1fg2loKoVsdSKuOsdI1u4Heqwt1BO8Rr
        vHhqsf0Bmta9texvIF0wFcYB1NNcGS/wcxvxU6w3tZZQ3ZzGVtZd7I93D+m0Jc0H70Rf8FrvRAbbcJYu
        wvi2lNThjEFsvEQGrvklQ17mfeb6zfaAvbWoO0XS5We4RXC1V9TQ1kJ3o56eUxyMPg5pBCyjyd2v7tbh
        TWnMa3m7UrdGG6UoDapo73s4Nk8xunzKAzZRePg7FGH8YWGG+4autNc7fN6ssLvVPVrgeLXDq0gFewgC
        IiAIiIAiIgCIiAIiIAiIgCIiALqq6qnoqWWsq6mKmp4Wl0k0sgYyMd7nHQAea7Vgft6W/GNoxzRuuWKb
        ldMO3Vj57fSzSbsdK5hAfFuNAadN5pDiNSDx4gkge3tm534IxfYfmVhiCnvk8dQySW8lnoQbp13IHEau
        J5Fw9HTgNddRiYh4ogCIiAIiIAiIgJxk7mfifLDFDLzYKouheQ2soZHHsKuMH1Xjoe5w4tPtB2VZYY3s
        mYeC6LFNglLqapG7JE8jtKeUevE8dHD+III4FanVkTsJ5gz4azSbhKqnItWIh2IY4+iyqaCYnjuJ4sPf
        vDuQGf6IiAIiIAiIgCIiAIiIAiIgCIiALX7t440lxDm/8243N+RYbhFOzT7U8ga+U+z0G/lWwNoBcAeR
        K1UZ4VE9VnLjOap17V19rAdfCZwH8AEAy0y0xfmHWSQYathmihIE9VK8RwQ68g556+A1Pgrio9kXFL4Q
        6rxZZIJNOLY4ppAPboFd2yTRw0mQeH3RRNY6pNRPKQOL3GZ7dT46NaPIBWwqXI4hZGxxj0SLejBrcFKX
        dmE2INlHH9E0PtVxst3HVrZ3QPHskAB96i02zpm/G/dGE+08WV9OR+tbAkUceJ2rukyR8OqfbZr+h2dM
        35DocKCPxfX04/nXpUmzDmvMR2lvtdNr/e3KPh/p1Wd6L18Tt+iPP7dV9WYW2rZLx3O8ftG+4fomdSyS
        WZ3uDAP4qT0Wx8zc/puPSXd0Ns4f7pFlWijfEL36kiwaV6GvvPTJK+5YdhXPq47tZqmTs462KMsMcmmo
        ZIwk7pIB0IJB0PkoBgu4S2nF9mukDi2Wjr4J2EcwWSNcPgtiucmHosVZXYiskkYe6ahkkh1Gu7LGN+Mj
        8zR7yteOXtqlvmPLDZoGF8lbcaeBoA/ekaPgrXCyHdD5u6KzMoVM/l7M21u4ucRyJK4XLtN92nLU6Lhb
        hqBERAEREAREQBERAEREAREQArXRtqYJqsK523G5iFwt2ID+0KWQDgXnQTM17w/U+Tm962Lqu85cI4Zz
        LwpNhy90z3Bru0payPQSUsumgezXn3EHg4ewiK26FS3N6JK6p2PUVsh2zJH2eQ2Em99G93vmkKsdRzLL
        DkuEcAWXDM1THUyW2m7B00bS1sh3nHUA8RzUjHEgDmVzV0lKyTX1Oiqi4wSYRVxhDOfBWKcwq3BNrnqj
        X05kbFNJGBDUuj13xGddTpoTxA1AOisdYzrlB6ktHsJxmtxewiIsTMIoXm1mVh3LSzU1xv4qpjVzGKnp
        6VgdJIQNXHiQAACNST1AUiwvfLbiXD1DfrROZ6CuhE0DyNCQehHQgggjoQVk65KPM10MFOLly76noSMb
        JG6Nw1a9pafIjRYZ7D2CX3vPCa+yQl1BhuOScuI4du4ujib58XO/IszJN7cdugF2h0BOnHTgoxkPg+iy
        vwPHZYmMqrhUymqudW3h207uYbr9ho9FuviepVhw++FSlzv6GlnUzt1yrZa6LiN7ZI2vbycNQuVeJ7KX
        sEREAREQBERAEREAREQBERAfMwJheBz3Tp7lEhyUvUZuNOaaqczT0Sd5p8FU8Ug2oyLPhs0m4n50HMHn
        xRFTlsY65T7PlzwhnVLi2rutJNaKOSeS3tjLu2kMgc0CQEaN3Q468TqQNFkUiKW66Vz3IjqqjUtRCIii
        JSndp7Ke55nWa0usdXSwXG2SybrKp5ZHJHIG73pAHQgtB5ceKneVOFfmTl5ZsLGpFTJQU+7LKAQ18jnF
        7yNemrjp4BSdFLK6Uq1W+yIlTFTc13YRF9wRummbEwaucdFEk29IkbSW2SWg4UMH+GF3LhjQxjWDk0AB
        crrILUUjmJPcmwiIsjEIiIAiIgCIiAIiIAiIgC6K2ljqodx/Aji1w6Fd6LGUVNcsuxlGTi9ruResp5KW
        bspNCdNQR1C6V7OIId6Nk4Hq+i7yPJeMubyqfg2OK7HQY1vxa1J9wiLtpGQyThk8piYftAa6HxUEVt6J
        pS5VtnUi99uHoi3e+WOLeeoaF5lzgo6Zwip5nzSA+keG6PDzU9mJZXHml09yCGVXZLlj1PxoiLXNk7aS
        nkqZuyjIB011J6L3qChjpG6g78h5uP8Awvx4ehP/AFJyOHqt/wCV66u8DGioKxrqU2dkSc3Wn0CIisyu
        CIiAIiIAiIgCIiAIiIAiIgCIiA+ZWNkjdG8atcNCoxWU76ad0T+nI9471KV0VlLHVRbknAj1XDmFp5mL
        8eO13Rt4mT8GXXsyMIuyshNLVfJ5HNL93eAB5jvXWuelFxbT7l7GSktrsfQkkDdwPcG9wcdF8oi8bb7n
        qSXYLuo6aSqmEbBw+07oAlthFbVPgZK0GMBz+pAUjpoIqeIRxN0HU9T5rexMN3fNL9pp5WWqvlXc+oIm
        QxNijGjWjQL7RFfpJLSKNtt7YREXp4EREAREQBERAEREAREQBERAEREARddVUQUlNJVVU8VPBEN6SWV4
        Yxg7y48AqOzM2m8EYb7Wjw2HYouLdRrA7s6Vh8ZSPS/ID5qSuqdj1FbMZTUe7LHx3SVclXT1UNPM+NsW
        6XsaSGnU9yj0FzqouBeJAOjhx96l2UmYOH8xsKQ3uxTAOADKqkeR2tLLpxY8fA8nDiFILnaLVWNc+spI
        SQCTJpuuHjqFT5fDZTsck9P6Ms8biKhBRkuhXYvJ04041+9/+L81VcqmcboIiaejevtURkxXTsxE9wpT
        JaBOQGBxEpj101Du/rp7FeVgtti+RQVttp4ZI5mCSOUjeJB4g6lL/wBP5mPyu7ST9yLE/UuDmOSobbj7
        f8iM4AgqY6qolfTythfEAJC0gEgqYLxM08c2PL7B9XiG9ygMjbuwQA+nUykejGwdSf4DUngFS+Wu1LhG
        +dnR4wpX4brTw7cEzUjj94DeZ+YEeKssTCnCnUFtI1snKjZZuXTZkGi/NbK+hudDHX22tp62klGsc9PK
        JI3Dwc0kL9KyMAiIgCIiAIiIAiIgCIiAIiIAuqrqaekppKmrqIaeCMavlleGMaO8uPAKJZr5k4Zy3sX7
        Rv1SXTygikoYSDPUuHRo6NHVx4Dz4LBjODNnFWZlxLrvUCltUb96mtcDj2EXcXf3j/8Ayd7AFt42JO/r
        2RDbdGv7maGK89MrMOB7arFtJWzt/sLcDVPJ7vQ9Ee0hUrjna3qpBJT4KwyynB1Dau6P33eYiYdPe4+S
        xa6adEVpXw6mHV9TUlkzfboSbHOPsY43qe2xRiCtuLQdWQOduwM+7G3Ro92qjKIt6MVFaSNdtvue/gLG
        OIsDX+O94auUlFVtG68D0o5ma67kjeTm+B5cxoeKzBy92h7RmBhW6Wmvo32bETbfId1ur6aY6aasfzaS
        T6rvYSsH1YuQjmjE9cw+s6i4ex7dVh/R15Fkebua+ZlTx8aco/QugcANFKjnhacssvYKWtoqq53R80ra
        Kmj9Fm6NDq+Q+q3Vx4AE+CiqqvaB+isv3pvgxW3EceF9Op+nU439P3zqzVy+qa/2RPNHMPE2Y2IDd8R1
        gfuatpqWLVsFMw/ZY33auOpPUqJIirIxUVqK6HdNtvbPdwdjDFGD675Zhi+11qlJ1cIJNGP+8w6td7QV
        feBdrS+UjWU+MsPU10YOBqqB3YTeZYdWE+W6sZ0UVuPXb+5GcbZQ7M2BYU2hcqb+GNOIxaJ3f2N0hdAQ
        fv8AFh/1KzbZX0Nzoo6621tNW0sv0c9PK2SN3k5pIK1YKa5U5m4qy2u3yuwVm9SSOBqrfMSaeoHi37Lu
        5zdCPEcFX28MWt1v/Jswy3v5kbI0UCyczVwzmbZzU2mU01xgaDWW2Zw7aDxH77NeTh7dDwU9VTKEoPlk
        upuJqS2giIsT0IiIAiIgCrTPnNyz5X2EOcI66+1bD8gt+9pr07STTi2MH2uPAdSPUzpzGteWmDZb3Whs
        9ZKTFb6Pe0NTNprp4NHNx6DxIWvPFuIrxivEVZf77WPq7hVv35ZDwA7mtH2WgcAByC38LE+M+aX7fya9
        93ItLufeMcTXvF2Iam/Yhr5K2vqD6T3cA1vRjG8mtHRoXjoivkklpFc3sIiL08CIiAKf5FfXGf8ABP8A
        1NUAU/yK+uM/4J/6mqbH8WJo8U8pZ9i7lVW0D6ll85vgxWqqq2gT6Fl85vgxWWV4TOO4J52Hv+GVOiIq
        c78IiIAiIgPRw3fLvhu90t7sdfNQXClfvwzxHQjvB6EHkQeBHNZ37PectszNtJo6wQ0OJaSPeqqRp0bM
        0cO2i15t7282nw0K1/r9+Hrxc8P3ukvVmrJaK4UcolgnjPFrh8QeRB4EEgrVysWN8f5JqrXW/wCDaSir
        zIbM635nYObcGCOmu9JuxXKjafopNOD29ezdoSD04jmFYa52cHCTjLuWaaktoIiLE9C6a6qpqGinrayd
        kFNTxulmledGsY0EucfAAEruWPW2/jZ1lwLSYQoptyrvry6p3TxFLGRqPzP3R5Bykprds1BepjOXJFsx
        oz0zErMyseVN6eZI7bDrBbKdx+igB4Ej95x9J3mB0CgaIuohBQiox7IqZNye2ERFkYhERAEREAU/yK+u
        M/4J/wCpqgCn+RX1xn/BP/U1TY/ixNHinlLPsXcqp2gfVsvnN/IrWVU7QJ/7KP8AG/kVlleEzj+B+dh7
        /hlUIiKnO+CIiAIiIAiIgJlk3j24Zc47o8Q0e/JTA9lX0zTwqKckbzfMes09CB4rY5aLhRXe1Ul0t1Qy
        oo6yFs8EreT2OGrT7itWKzJ2GMauueErjgqsm3p7O8VFGHHiaaQ8Wjwa/X/WFV8So3H4i9DcxbNPlZke
        iIqU3gASdBzPJa8dpjFvzxzjvVbDL2lDQv8A2fR6HUdnES0kfefvn2hZv5z4pGDMr7/iJrw2enpHMpeP
        Od/oR/7nA+xa1ySTq5xc483HmT3q24XX1c39jTy59onCIiuDRCIiAIiIAiIgCn+RX1xn/BP/AFNUAU/y
        K+uM/wCCf+pqmx/FiaPFPKWfYu5VRtA87N/7v5Fa6qfaCPp2UeE38issrwmcfwPzsPf8FVIiKnO+CIiA
        IiIAiIgCsHZ2xb8zM3rHdZZezop5vkVbx4djLo0k/dduu/Kq+TmNNSPEdFjOCnFxfqZRfK0zaxpodDzC
        KD5D4q+eeU2H75JIH1TqYU9Xx49vF6D9fMtDvzKcLlZRcZOL9C3T2tmL23rijsrTh/B0EmjqmV1xqmg/
        YZqyMHzcXn8qxIV9bc39c1N/ktP+uVUKuiwoqNEdFZe9zYREW0QhERAEREAREQBT/Ir64z/gn/qaoAp/
        kV9cZ/wT/wBTVNj+LE0eKeUs+xdyqfaB+ksvlN/KrYVTbQP01m+5N8Wqyy/CZx/A/Ow9/wAFVoiKnO+C
        IiAIiIAiIgCIiAyt2CcUatxDgyeTkWXKkaT5Rygf/M+9ZVrBXYm/rzh/yur+DVnUue4hBRuevUs8Z7rP
        /9k=
</value>
  </data>
  <metadata name="Column1.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="Column2.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="Column3.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
</root>